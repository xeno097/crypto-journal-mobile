// Mocks generated by Mockito 5.0.15 from annotations
// in crypto_journal_mobile/test/app/holding/data/repositories/holding_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:crypto_journal_mobile/app/holding/data/data_sources/holding_remote_data_source.dart'
    as _i2;
import 'package:crypto_journal_mobile/app/holding/data/inputs/get_holding_input.dart'
    as _i5;
import 'package:crypto_journal_mobile/app/holding/data/models/holding_model.dart'
    as _i4;
import 'package:crypto_journal_mobile/shared/data/network_info/network_info.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [IHoldingRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIHoldingRemoteDataSource extends _i1.Mock
    implements _i2.IHoldingRemoteDataSource {
  MockIHoldingRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.HoldingModel>> getHoldings(
          {_i5.GetHoldingInput? getHoldingInput}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getHoldings, [], {#getHoldingInput: getHoldingInput}),
              returnValue:
                  Future<List<_i4.HoldingModel>>.value(<_i4.HoldingModel>[]))
          as _i3.Future<List<_i4.HoldingModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [INetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkInfo extends _i1.Mock implements _i6.INetworkInfo {
  MockINetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  String toString() => super.toString();
}
