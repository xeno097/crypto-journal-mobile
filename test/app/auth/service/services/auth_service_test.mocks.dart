// Mocks generated by Mockito 5.0.11 from annotations
// in crypto_journal_mobile/test/app/auth/service/services/auth_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:crypto_journal_mobile/app/auth/service/dtos/auth_payload_dto.dart'
    as _i6;
import 'package:crypto_journal_mobile/app/auth/service/dtos/sign_in_dto.dart'
    as _i7;
import 'package:crypto_journal_mobile/app/auth/service/repositories/auth_repository.dart'
    as _i3;
import 'package:crypto_journal_mobile/shared/errors/base_error.dart' as _i5;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i3.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.BaseError, _i6.AuthPayloadDto>> signIn(
          _i7.SignInDto? signInDto) =>
      (super.noSuchMethod(Invocation.method(#signIn, [signInDto]),
              returnValue:
                  Future<_i2.Either<_i5.BaseError, _i6.AuthPayloadDto>>.value(
                      _FakeEither<_i5.BaseError, _i6.AuthPayloadDto>()))
          as _i4.Future<_i2.Either<_i5.BaseError, _i6.AuthPayloadDto>>);
  @override
  _i4.Future<_i2.Either<_i5.BaseError, bool>> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i2.Either<_i5.BaseError, bool>>.value(
                  _FakeEither<_i5.BaseError, bool>()))
          as _i4.Future<_i2.Either<_i5.BaseError, bool>>);
}
